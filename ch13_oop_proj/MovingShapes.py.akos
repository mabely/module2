# -*- coding: utf-8 -*-

# The code glides now but how does it take into account the min max frame?

from Shapes import *
from pylab import random as r
import time

class MovingShape:
    def __init__(self, frame, shape, diameter):
    #        Variables created here stores the object/figure created. 
    #        Self refers to the entire class, declared here, the entire class can use it
    #        init is called whenever an obj is created, establishing the attributes/var
    #        for that obj
        
        self.shape = shape
        self.diameter = diameter
        self.figure = Shape(shape, diameter)
        self.width = frame.width
        self.height = frame.height

        # Initialising the starting position of the shape at 0,0 before movement
        # self.x = 0
        # self.y = 50
        # self.goto(self.diameter/2, self.diameter/2)
        # print('I am at starting position')

        # Min, max coordinates for shapes to move within
        self.minx = self.diameter/2
        self.miny = self.diameter/2
        self.maxx = self.width - (self.diameter/2)
        self.maxy = self.height - (self.diameter/2)
        self.x = self.minx + r() * (self.maxx - self.minx)
        self.y = self.miny + r() * (self.maxy - self.miny)
        self.goto(self.x, self.y)
        self.directionx = 1
        self.directiony = 1

        # r() in the if/else statement decides whether it moves in pos or neg direction. Formula gives random value between
        # 5-15 to give dx,dy varies velocity values. movetick() updates this

    def goto(self, x, y):
        self.figure.goto(x, y)
        print(x, y)
    def moveTick(self):
        # dx,dy are rate of movement

        randnum = r()
        # if randnum < 0.5:
        #     self.dx = (5 + 10 * r()) * -1
        #     self.dy = (5 + 10 * r()) * -1
        # else:
        #     self.dx = 5 + 10 * r()
        #     self.dy = 5 + 10 * r()

        # self.dx = 5 + 10 * r()
        # self.dy = 5 + 10 * r()

        # self.x = self.x + self.dx
        # self.y = self.y + self.dy

        if self.x >= self.maxx:
            print("Hit X max")
            self.directionx = -1
        if self.x <= self.minx:
            print("Hit X min")
            self.directionx = 1
        self.dx = (5 + 10 * r()) * self.directionx
        self.x = self.x + self.dx

        if self.y >= self.maxy:
            print("Hit Y max")
            self.directiony = -1
        if self.y <= self.miny:
            print("Hit Y min")
            self.directiony = 1
        self.dy = (5 + 10 * r()) * self.directiony
        self.y = self.y + self.dy

        # if self.y >= self.maxy or self.y <= self.miny:
        #     print("Switched y direction")
        #     self.dy = (5 + 10 * r()) * -1
        #     self.y = self.y + self.dy

        self.goto(self.x,self.y)



class Square(MovingShape):
    def __init__(self, frame, diameter):
        MovingShape.__init__(self, frame, 'square', diameter)

class Diamond(MovingShape):
    def __init__(self, frame, diameter):
        MovingShape.__init__(self, frame, 'diamond', diameter)

class Circle(MovingShape):
    def __init__(self, frame, diameter):
        MovingShape.__init__(self, frame, 'circle', diameter)
        
        